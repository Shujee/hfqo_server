0.  Run command: composer global require hirak/prestissimo (Installs plugin to speed up composer install process)
1.  Create project folder (e.g. F:\Active\lado\lado)
2.  Open cmd with admin privilages
    cd C:\xampp\htdocs
    Run command: mklink /J C:\xampp\htdocs\lado "F:\Active\lado\lado"
3.  Open VSCode
4.  File > Open Folder > choose "F:\Active\lado\lado"
5.  Open Terminal
6.  Run command: composer create-project laravel/laravel F:/Active/lado/lado (take around a 3 minutes)
7.  Open file: C:\Windows\System32\drivers\etc\hosts 
    Add this line at the end: 127.0.0.1       lado.dov
8.  Open file: C:\xampp\apache\conf\extra\httpd-vhosts.conf
    Add the following at the bottom:
    <VirtualHost *:80>
      DocumentRoot "C:/xampp/htdocs/lado/public"
	    DirectoryIndex index.php    
      ServerName lado.dov
    </VirtualHost>
9.  Restart Apache server from XAMPP Control Panel
10. Type http://lado.dov in browser to make sure that Laravel site is up and running
11. Open .env and set the following:
    APP_URL=http://lado.dov
    DB_DATABASE=lado
    DB_USERNAME=root
    DB_PASSWORD=root
12. Create lado database in MySQL: create database lado
13. Run command: php artisan make:auth
14. Run command: php artisan migrate
15. Go to GIT pane and commit application as "Basic Laravel app with auth"
    Create remote for repository on BitBucket etc.
    Add remote: git remote add origin https://shujee@bitbucket.org/shujee/darulifta.git
    Push changes: git push -u origin master
16. Run command: composer require yajra/laravel-datatables-oracle (installs DataTables package)
    Open file config/app.php and add these lines:
    In providers section: Yajra\DataTables\DataTablesServiceProvider::class,
    In aliases section: 'DataTables' => Yajra\DataTables\Facades\DataTables::class,
    Run command: php artisan vendor:publish --provider="Yajra\DataTables\DataTablesServiceProvider"
    Run command: composer require yajra/laravel-datatables-html:^3.0 (installs DataTables HTML Builder plugin)
    Run command: php artisan vendor:publish --tag=datatables-html
17. Run command: composer require doctrine/dbal (installs doctrine which allows changing column definitions in migration files)
18. Run command: composer require reliese/laravel (installs package to generate models from database tables)
    Add this line to app.php (Providers section): Reliese\Coders\CodersServiceProvider::class,
    Run command: php artisan vendor:publish --tag=reliese-models
    Run command: php artisan code:models
13. Run command: php artisan code:models --table=req (Generates Model for the specified table 'req') 
14. To generate one-to-many sample records:
    Create Factory classes for each Model. Use Faker library to generate sample values.
    Run command: factory(App\Models\User::class, 100)->create()->each(function($u) { $u->reqs()->save(factory(App\Models\Reqs::class)->make());
15. Run command: composer require "laravelcollective/html":"^5.2.0" (installs Laravel Collective)
    Add this line to app.php (Providers section): Collective\Html\HtmlServiceProvider::class,
    Add these lines to app.php (Aliases section):  
    'Form' => Collective\Html\FormFacade::class,
    'Html' => Collective\Html\HtmlFacade::class,
16. Add this line to AppServiceProvider.php (boot function): 
    use Illuminate\Support\Facades\Schema;
    Schema::defaultStringLength(191);
    Fixes the default string length generated by migrations in order for MySQL to create indexes for them in MySQL older than the 5.7.7. 
17. Run command: composer require grimzy/laravel-mysql-spatial (installs grimzy/laravel-mysql-spatial package for handling geospatial data in Laravel)
    Add this line to app.php (Providers section): Grimzy\LaravelMysqlSpatial\SpatialServiceProvider::class,
18. Run command: composer require cornford/googlmapper (Google Maps package)
    Add this line to app.php (Providers section): Cornford\Googlmapper\MapperServiceProvider::class,
    Add this line to app.php (Aliases section): 'Mapper' => Cornford\Googlmapper\Facades\MapperFacade::class,
    Run command: php artisan vendor:publish --provider="Cornford\Googlmapper\MapperServiceProvider" --tag=googlmapper
19. Run command: composer require proengsoft/laravel-jsvalidation (installs client-side form validation package)
    Add this line to app.php (Providers section): Proengsoft\JsValidation\JsValidationServiceProvider::class,
    Add this line to app.php (Aliases section): JsValidator' => Proengsoft\JsValidation\Facades\JsValidatorFacade::class,
    Run command: php artisan vendor:publish --provider="Proengsoft\JsValidation\JsValidationServiceProvider"
    In jsvalidation.php, change 'view' => 'jsvalidation::bootstrap' to 'view' => 'jsvalidation::bootstrap4'
20. Run command: composer require jstayton/google-maps-geocoder (installs GeoCoder for Google Maps, for address to lat/lng translation)
21. Run command: composer require albertcht/invisible-recaptcha:dev-multi-forms (installs Google reCAPTCHA v3 package with multi-forms support)
22. Add username() and credentials() functions to  \app\Http\Controllers\Auth\LoginController.php.
23. Run command: composer require kartik-v/bootstrap-star-rating (installs star-rating package)
24. Run command: php artisan make:middleware LastSeen
25. Run command: composer require prettus/laravel-request-logger (Logger to log request/response details)
    Add this line to app.php (Providers section): Prettus\RequestLogger\Providers\LoggerServiceProvider::class,
    Run command: php artisan vendor:publish --provider="Prettus\RequestLogger\Providers\LoggerServiceProvider"
26. Run command: composer require yajra/laravel-datatables-buttons (installs Yajra Buttons plug-in for creating DataTables Service Implementation)
    Add this line to app.php (Providers section): Yajra\DataTables\ButtonsServiceProvider::class
    Run command: php artisan vendor:publish --tag=datatables-buttons
27. Run command: composer require laravel/passport (installs Laravel Passport package)
    Run command: php artisan migrate (to run passport migrations)
    Run command: php artisan passport:install (to generate passport keys)
28. Run command: composer require mpociot/laravel-apidoc-generator (installs API Documentation Generator)
    Run command: php artisan vendor:publish --provider="Mpociot\ApiDoc\ApiDocGeneratorServiceProvider" --tag=apidoc-config
29. INSTALL LARAVEL NOTIFICATIONS
30. Run command: composer require pusher/pusher-php-server (installs Pusher PHP SDK for realtime notifications)
31. Run command: php artisan storage:link (creates symbolic link between /public and /storage/app/public folders to allow browser access to otherwise private folder)

To create DataTables service class:
php artisan datatables:make <ClassName>

Logo Maker link: 
  https://logomakr.com/5vrCQj

GoDaddy Cron Job: 
  /usr/local/bin/php /home/bzri63cbce74/V2Beta/polltime3/artisan schedule:run >> /dev/null 2>&1
  Use 5 * before the command
  Add this to Kernel.php > schedule() function:

  $schedule->call(function () {
      //Your PHP code here
  })->everyMinute();

  Import the following namespace at the top:
  use Illuminate\Support\Facades\DB;